#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int m, n;

bool isValid(int x, int y) {
    return 0 <= x && x < m && 0 <= y && y < n;
}

int dfs(vector<vector<int>>& grid, int x, int y) {
    if (!isValid(x, y) || grid[x][y] == 0) {
        return 0;
    }

    int currentGold = grid[x][y];
    grid[x][y] = 0;  // Mark the cell as visited

    int maxGoldFromCurrentCell = currentGold + max({
        dfs(grid, x + 1, y),  // Move down
        dfs(grid, x - 1, y),  // Move up
        dfs(grid, x, y + 1),  // Move right
        dfs(grid, x, y - 1)   // Move left
    });

    grid[x][y] = currentGold;  // Backtrack: restore the cell value

    return maxGoldFromCurrentCell;
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        cin >> m >> n;
        vector<vector<int>> grid(m, vector<int>(n, 0));

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> grid[i][j];
            }
        }

        int maxGoldInDungeon = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] != 0) {  // Start from a cell with gold
                    maxGoldInDungeon = max(maxGoldInDungeon, dfs(grid, i, j));
                }
            }
        }

        cout << maxGoldInDungeon << endl;
    }

    return 0;
}
